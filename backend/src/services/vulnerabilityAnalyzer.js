/**
 * Vulnerability Analyzer Service
 * Analyzes configuration for security vulnerabilities
 */

const { calculateSecurityScore } = require('../utils/securityScore');

const analyzeConfiguration = (config, rawContent) => {
  const issues = [];
  const counts = {
    critical: 0,
    high: 0,
    medium: 0,
    low: 0
  };

  // Check for weak passwords
  checkPasswords(config, rawContent, issues, counts);

  // Check VTY lines
  checkVTYLines(config, rawContent, issues, counts);

  // Check services
  checkServices(config, rawContent, issues, counts);

  // Check SNMP
  checkSNMP(config, issues, counts);

  // Check interfaces
  checkInterfaces(config, issues, counts);

  // Check ACLs
  checkACLs(config, issues, counts);

  // Check CDP
  checkCDP(rawContent, issues, counts);

  // Check logging
  checkLogging(config, rawContent, issues, counts);

  // Check NTP
  checkNTP(config, rawContent, issues, counts);

  // Check SSH configuration
  checkSSH(rawContent, issues, counts);

  // Check banner
  checkBanner(config, issues, counts);

  const securityScore = calculateSecurityScore(
    counts.critical,
    counts.high,
    counts.medium,
    counts.low
  );

  return {
    issues,
    summary: {
      total: issues.length,
      critical: counts.critical,
      high: counts.high,
      medium: counts.medium,
      low: counts.low,
      score: securityScore
    }
  };
};

const checkPasswords = (config, rawContent, issues, counts) => {
  config.passwords.forEach(pwd => {
    if (pwd.includes('password 0') || (pwd.includes('password ') && !pwd.includes('password 7'))) {
      addIssue(issues, counts, 'critical', {
        category: 'Authentication',
        title: 'Weak or Plaintext Password Detected',
        description: 'Passwords are stored in plaintext or using weak encryption (type 0)',
        location: pwd,
        recommendation: 'Use "enable secret" with strong passwords and configure "service password-encryption"',
        cve: 'CWE-256, CWE-522'
      });
    }
  });

  // Check for service password-encryption
  if (!rawContent.includes('service password-encryption')) {
    addIssue(issues, counts, 'medium', {
      category: 'Authentication',
      title: 'Password Encryption Not Enabled',
      description: 'Password encryption service is not configured',
      location: 'Global configuration',
      recommendation: 'Enable with "service password-encryption"',
      cve: 'CWE-522'
    });
  }
};

const checkVTYLines = (config, rawContent, issues, counts) => {
  const hasVTY = config.vty.some(vty => vty.includes('line vty'));
  
  if (hasVTY) {
    const hasPassword = rawContent.toLowerCase().includes('password') || 
                       rawContent.toLowerCase().includes('login local');
    
    if (!hasPassword) {
      addIssue(issues, counts, 'critical', {
        category: 'Authentication',
        title: 'VTY Line Without Password',
        description: 'Virtual terminal lines configured without password protection',
        location: 'line vty configuration',
        recommendation: 'Configure password and login on all VTY lines, implement SSH instead of Telnet',
        cve: 'CWE-306'
      });
    }

    // Check for Telnet
    if (rawContent.includes('transport input telnet') || 
        (rawContent.includes('line vty') && !rawContent.includes('transport input ssh'))) {
      addIssue(issues, counts, 'high', {
        category: 'Remote Access',
        title: 'Telnet Enabled on VTY Lines',
        description: 'Telnet is enabled which transmits data in plaintext',
        location: 'line vty configuration',
        recommendation: 'Use "transport input ssh" to allow only SSH connections',
        cve: 'CWE-319'
      });
    }
  }
};

const checkServices = (config, rawContent, issues, counts) => {
  config.services.forEach(svc => {
    if (svc.includes('ip http server') && !rawContent.includes('ip http secure-server')) {
      addIssue(issues, counts, 'high', {
        category: 'Services',
        title: 'Insecure HTTP Service Enabled',
        description: 'HTTP server is enabled without HTTPS, exposing management interface',
        location: svc,
        recommendation: 'Disable HTTP and enable HTTPS: "no ip http server" and "ip http secure-server"',
        cve: 'CWE-319'
      });
    }

    if (svc.includes('service telnet')) {
      addIssue(issues, counts, 'high', {
        category: 'Services',
        title: 'Telnet Service Enabled',
        description: 'Telnet transmits credentials in plaintext',
        location: svc,
        recommendation: 'Disable Telnet and use SSH for remote access',
        cve: 'CWE-319'
      });
    }

    if (svc.includes('service finger')) {
      addIssue(issues, counts, 'medium', {
        category: 'Services',
        title: 'Finger Service Enabled',
        description: 'Finger service can leak user information',
        location: svc,
        recommendation: 'Disable with "no service finger"',
        cve: 'CWE-200'
      });
    }
  });
};

const checkSNMP = (config, issues, counts) => {
  config.snmp.forEach(snmp => {
    if (snmp.includes('public') || snmp.includes('private')) {
      addIssue(issues, counts, 'high', {
        category: 'SNMP',
        title: 'Default SNMP Community String',
        description: 'Using default community strings (public/private) allows unauthorized access',
        location: snmp,
        recommendation: 'Change to unique community strings and use SNMPv3 with authentication',
        cve: 'CWE-798'
      });
    }

    if (snmp.includes('RW')) {
      addIssue(issues, counts, 'medium', {
        category: 'SNMP',
        title: 'SNMP Write Access Enabled',
        description: 'SNMP community with write access can modify device configuration',
        location: snmp,
        recommendation: 'Use read-only (RO) access and restrict to specific hosts with ACLs',
        cve: 'CWE-732'
      });
    }

    if (snmp.includes('snmp-server') && !snmp.includes('v3')) {
      addIssue(issues, counts, 'medium', {
        category: 'SNMP',
        title: 'SNMPv1/v2 in Use',
        description: 'Using older SNMP versions without encryption',
        location: snmp,
        recommendation: 'Upgrade to SNMPv3 with authentication and encryption',
        cve: 'CWE-319'
      });
    }
  });
};

const checkInterfaces = (config, issues, counts) => {
  config.interfaces.forEach(intf => {
    if (intf.name.toLowerCase().includes('ethernet') && !intf.hasACL) {
      addIssue(issues, counts, 'medium', {
        category: 'Access Control',
        title: 'Interface Without Access Control List',
        description: `Interface ${intf.name} has no ACL configured`,
        location: `interface ${intf.name}`,
        recommendation: 'Apply appropriate access control lists to restrict traffic',
        cve: 'CWE-284'
      });
    }

    // Check for interfaces without description
    if (!intf.description && intf.name.toLowerCase().includes('ethernet')) {
      addIssue(issues, counts, 'low', {
        category: 'Documentation',
        title: 'Interface Without Description',
        description: `Interface ${intf.name} lacks description`,
        location: `interface ${intf.name}`,
        recommendation: 'Add description for documentation: "description <purpose>"',
        cve: 'CWE-1059'
      });
    }
  });
};

const checkACLs = (config, issues, counts) => {
  config.accessLists.forEach(acl => {
    acl.rules.forEach(rule => {
      if (rule.includes('permit any any') || rule.includes('permit ip any any')) {
        addIssue(issues, counts, 'high', {
          category: 'Access Control',
          title: 'Overly Permissive ACL Rule',
          description: 'ACL contains "permit any any" rule allowing all traffic',
          location: rule,
          recommendation: 'Follow principle of least privilege, only permit specific required traffic',
          cve: 'CWE-732'
        });
      }
    });
  });
};

const checkCDP = (rawContent, issues, counts) => {
  if (!rawContent.includes('no cdp run')) {
    addIssue(issues, counts, 'low', {
      category: 'Information Disclosure',
      title: 'CDP Protocol May Be Enabled',
      description: 'Cisco Discovery Protocol can leak device information to attackers',
      location: 'Global configuration',
      recommendation: 'Disable CDP globally with "no cdp run" if not needed',
      cve: 'CWE-200'
    });
  }
};

const checkLogging = (config, rawContent, issues, counts) => {
  if (config.logging.length === 0) {
    addIssue(issues, counts, 'medium', {
      category: 'Logging',
      title: 'Logging Not Configured',
      description: 'No logging configuration detected, hindering incident response',
      location: 'Global configuration',
      recommendation: 'Configure logging to syslog server for centralized log management',
      cve: 'CWE-778'
    });
  }
};

const checkNTP = (config, rawContent, issues, counts) => {
  if (config.ntp.length === 0) {
    addIssue(issues, counts, 'low', {
      category: 'Time Synchronization',
      title: 'NTP Not Configured',
      description: 'No NTP configuration found, may affect log correlation',
      location: 'Global configuration',
      recommendation: 'Configure NTP servers for accurate time synchronization',
      cve: 'CWE-778'
    });
  }
};

const checkSSH = (rawContent, issues, counts) => {
  if (!rawContent.includes('crypto key generate rsa') && 
      !rawContent.includes('ip ssh')) {
    addIssue(issues, counts, 'high', {
      category: 'Remote Access',
      title: 'SSH Not Configured',
      description: 'SSH is not configured for secure remote access',
      location: 'Global configuration',
      recommendation: 'Generate RSA keys and enable SSH: "crypto key generate rsa modulus 2048" and "ip ssh version 2"',
      cve: 'CWE-319'
    });
  } else if (rawContent.includes('ip ssh version 1')) {
    addIssue(issues, counts, 'high', {
      category: 'Remote Access',
      title: 'SSHv1 Enabled',
      description: 'SSH version 1 has known vulnerabilities',
      location: 'SSH configuration',
      recommendation: 'Use only SSH version 2: "ip ssh version 2"',
      cve: 'CWE-326'
    });
  }
};

const checkBanner = (config, issues, counts) => {
  if (config.banner.length === 0) {
    addIssue(issues, counts, 'low', {
      category: 'Legal',
      title: 'Login Banner Not Configured',
      description: 'No legal warning banner configured',
      location: 'Global configuration',
      recommendation: 'Configure login banner with legal warning: "banner login"',
      cve: 'CWE-1059'
    });
  }
};

const addIssue = (issues, counts, severity, issue) => {
  issues.push({ severity, ...issue });
  counts[severity]++;
};

module.exports = {
  analyzeConfiguration
};